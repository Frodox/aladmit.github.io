<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Александров Андрей</title>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <link>https://aladmit.com/</link>
    <description>Блог Александров Андрей -- DevOps-консультант, ведущий DevOps Deflope</description>
    <pubDate>Thu, 20 Dec 2018 00:48:46 +0300</pubDate>
    
      <item>
        <title>Конспект доклада &quot;Kanban - это не то, что вы привыкли о нем думать. Алексей Пименов&quot;</title>
        <link>/summary/2018/11/25/kanban.html</link>
        <guid isPermaLink="true">/summary/2018/11/25/kanban.html</guid>
        <description>&lt;p&gt;Суть: Kanban – это не просто доска, а метод улучшения качества сервиса.&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/lrDLbp0XeFA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;Как-начать-использовать-kanban&quot;&gt;Как начать использовать Kanban&lt;/h2&gt;

&lt;p&gt;Чтобы начать использовать Kanban, нужно:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Визуализировать ход работы&lt;/li&gt;
  &lt;li&gt;Ограничивать WIP&lt;/li&gt;
  &lt;li&gt;Считать Lead Time (время производства)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Выводы из книжки Хенрика Книберга:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;нет ролей&lt;/li&gt;
  &lt;li&gt;нет собраний&lt;/li&gt;
  &lt;li&gt;нет мастеров&lt;/li&gt;
  &lt;li&gt;нет организаций или гайдов&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kanban опирается на парадигмы Lean: управление изменениями, поток, вытягивающая система.&lt;/p&gt;

&lt;p&gt;Принципы Kanban:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Начните с того что есть сейчас. Нам нужно взять текущий процесс и наложить правила Kanban&lt;/li&gt;
  &lt;li&gt;Поддерживайте акты лидерства на всех уровнях. Поддерживать инициативы&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;Доска&quot;&gt;Доска&lt;/h2&gt;

&lt;p&gt;На доске должно быть две колонки для беклога: сделать и план. Сделать это классический беклог. План, это то что мы договорились сделать. Т.е. у нас появляются отложенные обязательства.&lt;/p&gt;

&lt;p&gt;На доске бывают колонки для спецов, например, Переводчик, Редактор или Программист, тестировщик. Эта колонка должна быть разделена на две: в работе и готово. Потому что то что переводчик закончил свою часть, еще не означает, что редактор начал свою.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.36.53&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;В-scrum&quot;&gt;В Scrum&lt;/h4&gt;

&lt;p&gt;Есть беклог с историями, которые берутся для спринта и декомпозируются на задачи. Задачи переносятся на доску.&lt;/p&gt;

&lt;h4 id=&quot;В-kanban&quot;&gt;В Kanban&lt;/h4&gt;

&lt;p&gt;Это не задачи, а рабочие элементы, над которым нужно совершить работу, чтобы сдвинуть дальше по процессу. Без WIP лимиты доска не является канбан доской. Мы ограничиваем количество работы на стадии процесса. Без ограничений появляется множество заблокированных задач, которые не будут двигаться, потому что люди просто будут брать другие. Если ограничение будет, то люди будут думать что брать, какие будут блокировки, и т.п. Элементы будут браться по одной и обрабатываться совместно. Через какое-то время совместная работа станет нормой, люди будут помогать другим людям и появятся кроссфункциональные команды.&lt;/p&gt;

&lt;h2 id=&quot;Влияние-wip-на-работу&quot;&gt;Влияние WIP на работу&lt;/h2&gt;

&lt;p&gt;Закон Литла: &lt;code class=&quot;highlighter-rouge&quot;&gt;среднее время ожидания = размер очереди / скорость обслуживания&lt;/code&gt;. И мы можем это видеть на доске. Изменяя лимит, мы влияем на поток.&lt;/p&gt;

&lt;p&gt;Работа с правилами.  С ними нужно работать, собирать фидбек и менять. Доска не статично, а меняется со временем. Например, то как мы выбираем задачи из беклога, тоже правило. Если Scrum говорит, что беклог должен быть приоретизирован, то Kanban говорит, что это зависит от ситуации. На доске вешаются листочки с критериями DoD и правилами выбора.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.37.29&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sla-cos-cfd-fe-на-основе-статистики-kanban&quot;&gt;SLA, CoS, CFD, FE на основе статистики Kanban&lt;/h2&gt;

&lt;p&gt;Если построить гистограмму по скорости прохождения элемента по процессу, мы можем увидеть пики, которые, возможно, являются разными типами работы. Т.е. Виды работ мы извлекаем из статистики работы. Из этого мы можем сказать, что на основании стат данных, задачи такого-то типа делаются за такое-то время. Теперь мы на отдельном листочке можем описать критерии, по которым мы понимаем тип задачи.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.37.49&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;На основе этих же данных можно посмотреть наше отношение к задаче и сделать SLA для разных типов важности задач.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.38.14&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Чтобы отразить это на доске, нужно ввести горизонтальные линии, а чтобы все задачи вдруг не стали срочными, добавить лимиты. Сумма лимитов горизонтальных линий должна быть равна сумме лимитов столбцов. Приоритет на Kanban доске строиться сверху вниз и справа налево.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.38.53&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Разрисуем нашу доску по цветам и по каждому цвету будем собирать статистику раз в неделю по кол-ву листочков.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.39.09&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;На этом строиться накопительная диаграмма потока (CFD). Диаграмма показывает Lead Time, WIP лимит и пропускную способность. Видно, как мы можем влиять на наш процесс по теореме Пифагора. Если меняем угол или катет, меняем пропускную способность.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.39.30&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;По гистограмме скорости прохождения элемента можно понять что происходить со временем производства. Делаем усредненный тренд и если он идет вверх, значит время производства увеличивается, если вниз — ускоряется. Можно сделать порог, после которого необходимо пойти поговорить с командой.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.40.01&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Рабочий процесс состоит из работ и фаз ожиданий. Мы можем посчитать длину по времени фазы ожидания и длину работы. Из этого выделяется эффективность потока (FE). &lt;code class=&quot;highlighter-rouge&quot;&gt;FE = Время работы / время производства&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2018-11-25/Screen&amp;#32;Shot&amp;#32;2018-11-26&amp;#32;at&amp;#32;12.40.25&amp;#32;PM.png&quot; alt=&quot; &quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;Каденциисобытия&quot;&gt;Каденции(события)&lt;/h2&gt;

&lt;h4 id=&quot;В-scrum-1&quot;&gt;В Scrum&lt;/h4&gt;

&lt;p&gt;Завязаны на частоту дней&lt;/p&gt;

&lt;h4 id=&quot;В-kanban-1&quot;&gt;В Kanban&lt;/h4&gt;

&lt;p&gt;Частота абсолютна разная&lt;/p&gt;

&lt;h3 id=&quot;Ежедневный-митинг&quot;&gt;Ежедневный митинг&lt;/h3&gt;

&lt;p&gt;Выделяется человек, который проходит по доске справа налево и задаем вопросы. Что нужно сделать, чтобы сместить элемент и можем ли мы чем-то помочь?&lt;/p&gt;

&lt;h3 id=&quot;Собрание-по-пополнению&quot;&gt;Собрание по пополнению&lt;/h3&gt;

&lt;p&gt;В какой-то момент образуется вакуум, мы все закрыли. Это значит что мы должны взять новые задачи. В Scrum задачи выбирает Product Owner, но это не всегда возможно и их может быть много. Поэтому собираем всех вместе и выбираем. Желательно иметь фасилитатора.&lt;/p&gt;

&lt;h3 id=&quot;Собрание-планирования-поставки&quot;&gt;Собрание планирования поставки&lt;/h3&gt;

&lt;p&gt;Заранее договариваемся о приемке задач на поставку. Если у на CD, то такие собрания не нужны.&lt;/p&gt;

&lt;h2 id=&quot;Сервисная-парадигма&quot;&gt;Сервисная парадигма&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Ваша организация — экосистема независимых сервисов управляемых правилами. Постоянно измеряйте и улучшайте ее эффективность&lt;/li&gt;
  &lt;li&gt;Управляйте работой, дайте людям организоваться вокруг нее&lt;/li&gt;
  &lt;li&gt;Поймите своих клиентов, сфокусируйтесь на их потребностях и ожиданиях&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;Экосистема&quot;&gt;Экосистема&lt;/h3&gt;

&lt;p&gt;Это куча отделов(сервисов) в компании. Одни сервисы оказывают услуги другим сервисам. На эти услуги мы накладываем SLA, о том какие могут быть запросы и сколько будут выполняться, и SLE, с ожиданиями заказчика. Другими словами, у каждого сервиса есть предназначение(Fitness For Purpose). Нужно стремиться к стыковке SLE и SLA.&lt;/p&gt;

&lt;h3 id=&quot;Ревью-сервиса-поставки&quot;&gt;Ревью сервиса поставки&lt;/h3&gt;

&lt;p&gt;Собираемся с заказчиками о том что мы сделали, что они ожидают от нас с точки зрения обслуживания. Рекомендуется проводить раз в 2 недели.&lt;/p&gt;

&lt;h3 id=&quot;Операционное-ревью&quot;&gt;Операционное ревью&lt;/h3&gt;

&lt;p&gt;Собираются представители сервисов, обсуждают как они между собой взаимодействуют.&lt;/p&gt;

&lt;h3 id=&quot;Риск-ревью&quot;&gt;Риск ревью&lt;/h3&gt;

&lt;p&gt;Берем диаграммы от разных сервисов и строим цепочки, чтобы понять что нужно делать, чтобы глобальный сервис работал вовремя.&lt;/p&gt;

&lt;h3 id=&quot;enterprise-services-planning&quot;&gt;Enterprise Services Planning&lt;/h3&gt;

&lt;p&gt;Как собрать конфигурацию сервисов в рамках компании и как планировать ее работу.&lt;/p&gt;

&lt;h2 id=&quot;scrumban&quot;&gt;Scrumban&lt;/h2&gt;

&lt;p&gt;Применение канбановских принципов в зрелом акрам-процессе.&lt;/p&gt;

&lt;h2 id=&quot;Итого&quot;&gt;Итого&lt;/h2&gt;

&lt;p&gt;Kanban — метод улучшения качества сервиса.&lt;/p&gt;

&lt;h3 id=&quot;Содержит&quot;&gt;Содержит&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;3 принципа&lt;/li&gt;
  &lt;li&gt;6 практик&lt;/li&gt;
  &lt;li&gt;7 каденций&lt;/li&gt;
  &lt;li&gt;2 роли&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;Метрики&quot;&gt;Метрики&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;время производства&lt;/li&gt;
  &lt;li&gt;эффективность потока&lt;/li&gt;
  &lt;li&gt;пропускная способность&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;Графики&quot;&gt;Графики&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;накопительная диаграмма потока&lt;/li&gt;
  &lt;li&gt;спектральная диаграмма&lt;/li&gt;
  &lt;li&gt;контрольная диаграмма&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;Литература&quot;&gt;Литература&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/34994240-agile&quot;&gt;Канбан Альтернативный путь в Agile&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/30212820-essential-kanban-condensed&quot;&gt;Essential Kanban Condensed&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/25953144-the-scrumban-r-evolution&quot;&gt;The Scrumban [R]Evolution: Getting the Most Out of Agile, Scrum, and Lean Kanban&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;Ссылки&quot;&gt;Ссылки&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lrDLbp0XeFA&quot;&gt;Запись доклада&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/ScrumTrek/kanban-74235710&quot;&gt;Слайды&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 25 Nov 2018 00:00:00 +0300</pubDate>
      </item>
    
      <item>
        <title>Конспект доклада &quot;Concource CI с кубиками на чистом YAML. Максим Залысин&quot;</title>
        <link>/summary/2018/11/21/summary-devops-moscow-concource.html</link>
        <guid isPermaLink="true">/summary/2018/11/21/summary-devops-moscow-concource.html</guid>
        <description>&lt;p&gt;Суть: Concource CI может интегрироваться с чем угодно с помощью ресурсов, декларативно описывается, легко расширяется.&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/4PRWZBgUDxU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;Из-чего-состоит-concource&quot;&gt;Из чего состоит Concource&lt;/h2&gt;

&lt;p&gt;Concource написан на go. Состоит из сервера с вебом, апи, шедулером и регистратором воркеров. Через ssh-туннель создается соединение между воркерами (кроссплатформенные) и вебом. Веб хранит данные в постгресе, в котором хранятся пайплайны, логи и т.п. Артефакты конкурс хранить не умеет.&lt;/p&gt;

&lt;p&gt;Есть утилита fly, через которую можно взаимодействовать с вебом. Управлять командами, проектами, плайплайнами и т.п. Как правило, всем хватает веб-морды для взаимодействия. Для дебага можно выполнить таск локально или провалиться в уже существующий.&lt;/p&gt;

&lt;p&gt;У ребят микросервисы, для каждого из которых конкурс делает тесты, а потом делает отметочку в битбакете, что все ок и пора делать ревью. Когда PR заапрувлен, смержен, протегирован, тесты запускаются заново, делается сборка в контейнер, оповещение в слак. Дальше идет деплой в тест через нажатие тестировщиком кнопки в вебе или изменением манифеста кубера. Дальше тестировщик станет отметочку в задаче, что все ок, можно деплоить в прод. Сейчас договариваться, чтобы деплой в тест и прод происходили полностью автоматически.&lt;/p&gt;

&lt;h2 id=&quot;Какие-есть-сущности&quot;&gt;Какие есть сущности&lt;/h2&gt;

&lt;p&gt;Есть пайплайн, который состоит из ресурсов и джобов.
Ресурсы — кубик, которым конкурс взаимодействует с чем-то. Например, ресурс слак позволяет работать со слаком.
Джобы, в которых выполняются команды.
Есть встроенный дашборд со статусом тасков.&lt;/p&gt;

&lt;h3 id=&quot;resource&quot;&gt;Resource&lt;/h3&gt;

&lt;p&gt;Есть встроенные ресурсы, их около 20. Например, git, который постоянно проверяет наличие новых коммитов, скачивает код.
Есть комьюнити-ресурсы. Например, который умеет создавать пулреквесты в битбакет. Объявляем в пайплайне какие внешние ресурсы нам нужны и используем.&lt;/p&gt;

&lt;p&gt;Ресурсы могут забирать секреты из разных источников(вольт, кубер и т.п.) или отдельного yml-файла.&lt;/p&gt;

&lt;p&gt;Каждый ресурс состоит из 3-х бинарных файлов(check, in, out). Через check ресурс проверят, что ему что делать. In используется внутри джоба, там описано что нужно делать. Out отправляет результат.&lt;/p&gt;

&lt;h3 id=&quot;job&quot;&gt;Job&lt;/h3&gt;

&lt;p&gt;Содержит в себе инструкцию. Когда тригериться, какие таски выполнять, какие ресурсы и как использовать, что делать если все упало/прошло успешно. Таски можно выносить в файлы/репозитории и переиспользовать в разных проектах. Таски можно выполнять параллельно и агрегировать результат.&lt;/p&gt;

&lt;h3 id=&quot;Преимущества&quot;&gt;Преимущества&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;YAML&lt;/li&gt;
  &lt;li&gt;CLI&lt;/li&gt;
  &lt;li&gt;Интеграция с чем угодно через Resource&lt;/li&gt;
  &lt;li&gt;Просто написать свой ресурс. Можно написать все три части ресурса на разных языках&lt;/li&gt;
  &lt;li&gt;Job выполняет много танков в связке с разными ресурсами&lt;/li&gt;
  &lt;li&gt;Переиспользуемые таски&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;Недостатки&quot;&gt;Недостатки&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Воркеры требовательны к ресурсам, иногда они залипают&lt;/li&gt;
  &lt;li&gt;Сложно повторно запустить job на устаревшем ресурсе. Т.е. Если ресурс обновился, конкурс его сразу заберет и придется покостылить, чтобы запустить старый пайплайн на старой версии ресурса&lt;/li&gt;
  &lt;li&gt;Нет разделения доступа по ролям в одной команде&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Автор сейчас решает требовательность к ресурсам, переписывает встроенные ресурсы на го.&lt;/p&gt;

&lt;h2 id=&quot;Ссылки&quot;&gt;Ссылки&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4PRWZBgUDxU&quot;&gt;Запись доклада&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/devopsmoscow/concourse-ci-s-kubikami-i-na-chistom-yaml&quot;&gt;Слайды&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Nov 2018 00:00:00 +0300</pubDate>
      </item>
    
      <item>
        <title>Конспект доклада &quot;Страх и ненависть DevSecOps Шабалин Юрий, Swordfish Security&quot;</title>
        <link>/summary/2018/11/18/summary-fear-and-hate-devsecops.html</link>
        <guid isPermaLink="true">/summary/2018/11/18/summary-fear-and-hate-devsecops.html</guid>
        <description>&lt;p&gt;Суть: хотим предотвращать появление уязвимостей, а не обнаруживать их. Для этого разработчикам можно дать инструменты сканирования.&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;&lt;figure&gt;&lt;iframe width=&quot;640&quot; height=&quot;480&quot; src=&quot;//www.youtube.com/embed/ROH636e7Rx8&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;/div&gt;

&lt;h2 id=&quot;application-security&quot;&gt;Application Security&lt;/h2&gt;

&lt;p&gt;Безопасность приложений. Тестируем приложения, интегрируемся с разработкой. Мы хотим предотвратить появление уязвимостей, а не обнаружить их.&lt;/p&gt;

&lt;p&gt;Существующие подходы: OWASP, BSIMM, OpenSAMM. Рекомендуемый: BSIMM&lt;/p&gt;

&lt;p&gt;Как сейчас: безопасность это контролирующий орган, который всех пинает в конце релиза.
Проблемы:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Инструменты ИБ отдельно от разработки&lt;/li&gt;
  &lt;li&gt;Особенности процесса разработки не учитываются&lt;/li&gt;
  &lt;li&gt;Проверки ИБ проходят перед релизом&lt;/li&gt;
  &lt;li&gt;Требования ИБ непонятны&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Можно купить кучу инструментов безопасности, вывалить кучу уязвимостей, но это не поможет. Нужен процесс.&lt;/p&gt;

&lt;p&gt;ИБ должны использовать те же инструменты, что и разработчики: чаты, документация и т.п. Security Champions.&lt;/p&gt;

&lt;h2 id=&quot;security-champions&quot;&gt;Security Champions&lt;/h2&gt;

&lt;p&gt;Чувак в команде, который заинтересован в обеспечении безопасности. Т.е. Это разработчик, который работает с инструментами ИБ, консультирует команду об ИБ, проводить код-ревью и тренинги.&lt;/p&gt;

&lt;h2 id=&quot;Этапы-тестирования&quot;&gt;Этапы тестирования&lt;/h2&gt;

&lt;h3 id=&quot;Статический-анализ&quot;&gt;Статический анализ&lt;/h3&gt;

&lt;p&gt;Анализ кода на наличие уязвимостей, анализ паттернов, датафлоу, анализ конфигураций.
Такое сканирование занимает кучу времени, высокий уровень False Nagative/False Positive.&lt;/p&gt;

&lt;h4 id=&quot;Требование-к-продукту-стат-анализа&quot;&gt;Требование к продукту стат. анализа&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Низкий уровень False Positive&lt;/li&gt;
  &lt;li&gt;Возможности кастомизации&lt;/li&gt;
  &lt;li&gt;Инкрементальные сканирования&lt;/li&gt;
  &lt;li&gt;Интеграция в CI&lt;/li&gt;
  &lt;li&gt;Интеграция в Code Review&lt;/li&gt;
  &lt;li&gt;Интеграция со средой разработки&lt;/li&gt;
  &lt;li&gt;Понимание Roadmap продукта&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Инструменты: PVS-Stidio, Chechmarx, veracode, incode, fortify, coverity, positive technologies&lt;/p&gt;

&lt;p&gt;Есть OpenSource решения под конкретные языки, на них можно обкатывать процесс.
Интегрировать решение на PR, делать инкрементальные сканы. Запретить мердж, если тест не пройден. Отправлять отчет в SonarQube.
Интеграция в CI. Бежит после тестов.&lt;/p&gt;

&lt;p&gt;Нельзя после первого скана требовать исправление всего что нашли! Сформируйте технический долг и постепенно его разбирайте.&lt;/p&gt;

&lt;p&gt;Все сканы всегда по дельте, чтобы на разработчика не вывались фиксирует по всему проекту.&lt;/p&gt;

&lt;h3 id=&quot;Контроль-opensource&quot;&gt;Контроль OpenSource&lt;/h3&gt;

&lt;p&gt;Анализ используемых библиотек на уязвимости в открытых и закрытых источниках
Анализ лицензии
Контроль библиотек в периметре организации. По определенным политикам мы можем отсечь использованные библиотеки. Например, отсекать все что с критикал уязвимостью.
Мониторинг новых уязвимостей в компонентах&lt;/p&gt;

&lt;h4 id=&quot;Требования-к-инструменту&quot;&gt;Требования к инструменту&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Низкий уровень False Positive&lt;/li&gt;
  &lt;li&gt;Удобство использования, интеграции&lt;/li&gt;
  &lt;li&gt;Разные политики для разных этапов разработки&lt;/li&gt;
  &lt;li&gt;Мониторинг компонентов в проде и организации&lt;/li&gt;
  &lt;li&gt;Поддержка разных сборок, языков, контейнеров&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Инструменты: Sonatype Nexus, Source Clear, BlackDuck, Dependency-check, WhiteSource&lt;/p&gt;

&lt;p&gt;Интеграция. В CI как этап тестирования, запрет сборки, если там есть критичные баги или запрет деплить в прод. Интеграция в среду разработки, чтобы знать об уязвимостях до коммита. Мониторим что у нас в проде(Nexus IQ).&lt;/p&gt;

&lt;h3 id=&quot;Динамический-анализ&quot;&gt;Динамический анализ&lt;/h3&gt;

&lt;p&gt;Анализ уже собранного и развернутого приложения.
Имитирует работу пользователя, анализирует ответы приложения. Поиск известных уязвимостей. Fuzzing. Проверка конфигурации сервера.&lt;/p&gt;

&lt;p&gt;Риски: высокая нагрузка на сервер, нет интеграций, возможность изменения настроек аналитики, отсутствие поддержки технологий, сложность.&lt;/p&gt;

&lt;h4 id=&quot;Требования-к-инструменту-1&quot;&gt;Требования к инструменту&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Низкий уровень False Positive&lt;/li&gt;
  &lt;li&gt;Наличие интеграций&lt;/li&gt;
  &lt;li&gt;Поддержка технологий&lt;/li&gt;
  &lt;li&gt;Удобноство записи последовательности логина&lt;/li&gt;
  &lt;li&gt;Возможность настройки сканирование(интенсивности и исключение адресов)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Инструменты: Burpsuite, appscan, acunetix, w3af, owasp, microfocus&lt;/p&gt;

&lt;p&gt;Интеграция: в CD после установки на стенд. Идеально иметь отдельный стенд для тестирования. До начала тестирования необх записать послед логина. Наличие уязвимостей — не стоппер.&lt;/p&gt;

&lt;h2 id=&quot;Уязвимости&quot;&gt;Уязвимости&lt;/h2&gt;

&lt;p&gt;Тоже самое, что и просто баги. У критичности есть ранжирование по критичности, как и у багов, это позволяет их приоретизировать в одном беклоге, т.к. с точки зрения качества ПО они идентичны.&lt;/p&gt;

&lt;h2 id=&quot;Процесс&quot;&gt;Процесс&lt;/h2&gt;

&lt;p&gt;Надо собирать метрички(производственные, инструментов, дефект-трекеры)&lt;/p&gt;

&lt;h2 id=&quot;Ссылки&quot;&gt;Ссылки&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://youtu.be/ROH636e7Rx8&quot;&gt;Запись доклада&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/devopsmoscow/strakh-i-nienavist-devsecops&quot;&gt;Слайды&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 18 Nov 2018 00:00:00 +0300</pubDate>
      </item>
    
  </channel>
</rss>
